-- Grammar for Javalette	Salvo 'LtWorf' Tomaselli
entrypoints Program ;
comment "//" ;
comment "/*" "*/" ;
comment "#";    --Stripping out preprocessor stuff. This will make it just not work on some real-life code.
position token CIdent (letter | '_') (letter | digit | '_')*;       --Identifiers start with letter or '_' and then can have numbers too.


Program.            Program             ::= [Declaration];
TrueLit.            Bool                ::= "true";    --Naming it boolean it won't compile
FalseLit.           Bool                ::= "false";
Typestrng.          Type                ::= "string";    --Maybe someone will not like this?
Typebool.           Type                ::= "boolean";
Typedouble.         Type                ::= "double";
Typeint.            Type                ::= "int";
Typevoid.           Type                ::= "void";


[].                 [Declaration]       ::= ;--Allow empty declaration list
(:).                [Declaration]       ::= Declaration [Declaration];
[].                 [Statement]         ::= ; --Allow empty statement list
(:).                [Statement]         ::= Statement [Statement];
Argument.           Argument            ::= Type CIdent;
[].                 [Argument]          ::= ; --3 rules to have no arguments, and having the ending argument without the ','
(:[]).              [Argument]          ::= Argument;
(:).                [Argument]          ::= Argument "," [Argument];
Fnct.               Declaration         ::= Type CIdent "(" [Argument] ")" "{" [Statement] "}";	--2nd part of function declaration. Splitted for conflicts problems
VarNA.              VItem               ::= CIdent;
VarVA.              VItem               ::= CIdent "=" Expr;
(:[]).              [VItem]             ::= VItem;
(:).                [VItem]             ::= VItem "," [VItem];
LocalVars.          Statement           ::= Type [VItem] ";";
Nop.                Statement           ::= ";"; --Allow empty instruction
Return.             Statement           ::= "return" Expr ";";
VoidReturn.         Statement           ::= "return" ";";
Block.              Statement           ::= "{" [Statement] "}";
While.              Statement           ::= "while" "(" Expr ")" Statement;
DoWhile.            Statement           ::= "do" Statement "while" "(" Expr ")" ";"; --My own addition to the language
Expression.         Statement           ::= Expr ";" ;
IfElse.             Statement           ::= "if" "(" Expr ")" Statement "else" Statement;
If.                 Statement           ::= "if" "(" Expr ")" Statement;




For.                Statement           ::= "for" "(" ";" ";" ")" Statement;
Break.              Statement           ::= "break" ";";
Continue.           Statement           ::= "continue" ";";




[].                 [Expr]              ::= ;
(:[]).              [Expr]              ::= Expr;
(:).                [Expr]              ::= Expr "," [Expr];
Eint.               Expr16              ::= Integer;
Edbl.               Expr16              ::= Double;
Ebool.              Expr16              ::= Bool;
Estrng.             Expr16              ::= String;
Eitm.               Expr16              ::= CIdent;
Efun.               Expr15              ::= CIdent "(" [Expr] ")";
Eainc.              Expr14              ::= Expr15 "++";
Eadec.              Expr14              ::= Expr15 "--";
Epinc.              Expr13              ::= "++" Expr14;
Epdec.              Expr13              ::= "--" Expr14;
ENeg.               Expr12              ::= "-" Expr13 ;
ENot.               Expr12              ::= "!" Expr13 ;
Emul.               Expr11              ::= Expr11 "*" Expr12;
Ediv.               Expr11              ::= Expr11 "/" Expr12;
Emod.               Expr11              ::= Expr11 "%" Expr12;
Eadd.               Expr10              ::= Expr10 "+" Expr11;
Esub.               Expr10              ::= Expr10 "-" Expr11;
Elt.                Expr9               ::= Expr9 "<" Expr10;
Egt.                Expr9               ::= Expr9 ">" Expr10;
Eelt.               Expr9               ::= Expr9 "<=" Expr10;
Eegt.               Expr9               ::= Expr9 ">=" Expr10;
Eeql.               Expr8               ::= Expr8 "==" Expr9;
Edif.               Expr8               ::= Expr8 "!=" Expr9;
Eand.               Expr4               ::= Expr4 "&&" Expr5;
Eor.                Expr3               ::= Expr3 "||" Expr4;
Eass.               Expr2               ::= Expr3 "=" Expr2;
coercions Expr 16 ;
